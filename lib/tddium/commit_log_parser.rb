# this is not namespaced under Tddium because we want to eventually move this out into another gem
class CommitLogParser
  attr_accessor :commit_log

  # example commit_log generated by
  # `git log --pretty='%H%n%s%n%aN%n%aE%n%at%n%cN%n%cE%n%ct%n' HEAD^..HEAD`

  #  15e8cbd88d68d210953d51c28e26c6b9944a313b
  #  ignore .ruby-version for rvm
  #  Bob Smith
  #  bob@example.com
  #  1367556311
  #  Fred Smith
  #  fred@example.com
  #  1367556311
  #

  def initialize(commit_log)
    @commit_log = commit_log
  end

  # Returns a list of commits in the following format
  # [{
  #  "id" =>        "15e8cbd88d68d210953d51c28e26c6b9944a313b",
  #  "author" =>    {"name"=>"Bob Smith", "email"=>"bob@example.com"},
  #  "committer" => {"name"=>"Fred Smith", "email"=>"fred@example.com"},
  #  "summary"   => "ignore .ruby-version for rvm",
  #  "date"      => 2013-05-03 11:45:11 +0700
  # }]

  def commits
    record = []
    commits = []
    commit_log.lines.each_with_index do |line|
      line.strip!
      if line.empty?
        c = parse_commit(record)
        commits.push(c)
        record = []
      else
        record.push(line)
      end
    end

    commits
  end

  private

  def parse_commit(record)
    time = Time.at(record[4].to_i)
    author = build_user(record[2], record[3])
    committer = build_user(record[5], record[6])
    build_commit(record[0], author, committer, record[1], time)
  end

  def build_user(name, email)
    {"name" => name, "email" => email}
  end

  def build_commit(sha, author, committer, summary, date)
    {"id" => sha, "author" => author, "committer" => committer, "summary" => summary, "date" => date}
  end
end
